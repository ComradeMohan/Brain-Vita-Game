{"version":3,"sources":["const/actionTypes.js","const/boardConstants.js","components/header/Header.js","assets/images/marble.jpg","components/board/Board.js","containers/form/Form.js","actions/formActions.js","containers/app/App.js","actions/appActions.js","reportWebVitals.js","reducers/appReducer.js","reducers/formReducer.js","store.js","index.js","components/board/Board.module.css","containers/form/Form.module.css"],"names":["MARBLE_PICKED","MARBLE_RELEASED","MARBLE_DROPPED","MARBLE_REMOVED","RESET_BOARD","SUBMIT_FORM","OCCUPIED","PICKED","VACANT","BLANK_SPACE","DEFAULT_BOARD","Header","className","Board","props","Fragment","noOfMarblesLeft","id","boardStyle","errorMessage","message","boardContainer","board","boardStatus","map","row","x","type","y","vacant","blank","src","marble","alt","onClick","onMarbleClick","picked","onVacantPlaceClick","resetButton","onGameRestart","React","memo","Form","state","userName","onFormUpdate","bind","event","target","name","value","this","setState","test","String","submitForm","alert","formStyle","formContainer","placeholder","onChange","submitButton","onClickSubmit","Component","connect","formReducer","dispatch","score","payload","Promise","resolve","reject","setTimeout","App","defaultState","isAnyValidMoveLeft","cloneDeep","isEmpty","pickedMarble","pickMarble","setMessage","releasePickedMarble","isValidMove","dropMarble","removeMarble","middleMarble","getMiddleMarble","then","oldState","Math","abs","isAnyValidMove","length","x1","y1","x2","y2","resetBoard","appReducer","types","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","action","createStore","combineReducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7018bb91.chunk.js","sourcesContent":["/**\r\n * @description app action types\r\n*/\r\nexport const MARBLE_PICKED = \"MARBLE_PICKED\";\r\nexport const MARBLE_RELEASED = \"MARBLE_RELEASED\";\r\nexport const MARBLE_DROPPED = \"MARBLE_DROPPED\";\r\nexport const MARBLE_REMOVED = \"MARBLE_REMOVED\";\r\nexport const RESET_BOARD = \"RESET_BOARD\";\r\n\r\n/**\r\n * @description form action types\r\n*/\r\nexport const SUBMIT_FORM = \"SUBMIT_FORM\";\r\n","/**\r\n * @description board status constant\r\n*/\r\nexport const OCCUPIED = \"OCCUPIED_WITH_MARBLE\";\r\nexport const PICKED = \"MARBLE_PICKED\";\r\nexport const VACANT = \"VACANT\";\r\nexport const BLANK_SPACE = \"BLANK_SPACE\";\r\n\r\n\r\n/**\r\n * @description default marbles placement\r\n */\r\nexport const DEFAULT_BOARD = [\r\n    [BLANK_SPACE, BLANK_SPACE, OCCUPIED, OCCUPIED, OCCUPIED, BLANK_SPACE, BLANK_SPACE],\r\n    [BLANK_SPACE, BLANK_SPACE, OCCUPIED, OCCUPIED, OCCUPIED, BLANK_SPACE, BLANK_SPACE],\r\n    [OCCUPIED, OCCUPIED, OCCUPIED, OCCUPIED, OCCUPIED, OCCUPIED, OCCUPIED],\r\n    [OCCUPIED, OCCUPIED, OCCUPIED, VACANT, OCCUPIED, OCCUPIED, OCCUPIED],\r\n    [OCCUPIED, OCCUPIED, OCCUPIED, OCCUPIED, OCCUPIED, OCCUPIED, OCCUPIED],\r\n    [BLANK_SPACE, BLANK_SPACE, OCCUPIED, OCCUPIED, OCCUPIED, BLANK_SPACE, BLANK_SPACE],\r\n    [BLANK_SPACE, BLANK_SPACE, OCCUPIED, OCCUPIED, OCCUPIED, BLANK_SPACE, BLANK_SPACE],\r\n];\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <h1 className=\"text-center\">Brain Vita Game</h1>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/marble.d643f655.jpg\";","import React, { Fragment } from 'react';\r\nimport marble from '../../assets/images/marble.jpg';\r\nimport boardStyle from './Board.module.css';\r\nimport { OCCUPIED, VACANT, BLANK_SPACE, PICKED } from '../../const/boardConstants';\r\n\r\nconst Board = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h3 className=\"no-margin text-center\">Marbles Left</h3>\r\n            <h2 className=\"no-margin text-center\">{props.noOfMarblesLeft}</h2>\r\n            <p className=\"text-center\" id={boardStyle.errorMessage}>{props.message}</p>\r\n            <div className={boardStyle.boardContainer}>\r\n                <div className={boardStyle.board}>\r\n                    {props.boardStatus.map((row, x) => {\r\n                        return (\r\n                            <div key={x} className={boardStyle.row}>\r\n                                {row.map((type, y) => {\r\n                                    return (\r\n                                        <Fragment key={y}>\r\n                                            {type === BLANK_SPACE && (\r\n                                                <div className={boardStyle.vacant.blank}></div>\r\n                                            )}\r\n                                            {type === OCCUPIED && (\r\n                                                <img src={marble} alt=\"Marble\" className={boardStyle.marble} onClick={() => props.onMarbleClick(x, y)} />\r\n                                            )}\r\n                                            {type === PICKED && (\r\n                                                <img src={marble} alt=\"Marble\" className={`${boardStyle.marble} ${boardStyle.picked}`} onClick={() => props.onMarbleClick(x, y)} />\r\n                                            )}\r\n                                            {type === VACANT && (\r\n                                                <div className={boardStyle.vacant} onClick={() => props.onVacantPlaceClick(x, y)}></div>\r\n                                            )}\r\n                                        </Fragment>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <button id={boardStyle.resetButton} onClick={props.onGameRestart}>Restart</button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default React.memo(Board);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport formStyle from './Form.module.css';\r\nimport { submitForm } from '../../actions/formActions';\r\n\r\nclass Form extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userName: ''\r\n        }\r\n        this.onFormUpdate = this.onFormUpdate.bind(this);\r\n    }\r\n    \r\n    /**\r\n     * @description update the state value which is used in form\r\n     * @param {Event} event: on change event when input is changed\r\n     */\r\n    onFormUpdate(event) {\r\n        const {name, value} = event.target;\r\n        this.setState({[name]: value});\r\n    }\r\n\r\n    /**\r\n     * @description to submit the form\r\n     * will check if name is valid (only letters)\r\n     */\r\n    onClickSubmit() {\r\n        const RegExpression = /^[^-\\s][a-zA-Z\\s]*$/;\r\n        if (RegExpression.test(String(this.state.userName))) {\r\n            this.props.submitForm(this.state.userName, this.props.noOfMarblesLeft)\r\n        } else {\r\n            alert('ERROR : Please enter user name to submit the score.')\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return  <div id={formStyle.formContainer}>\r\n            <input type=\"text\" placeholder=\"User Name\" value={this.state.userName} name=\"userName\" onChange={this.onFormUpdate}/>\r\n            <button id={formStyle.submitButton} onClick={this.onClickSubmit.bind(this)}>Submit</button>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state.formReducer;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=> {\r\n  return {\r\n    submitForm: (userName, score) => {\r\n        dispatch(submitForm({userName, score}))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Form));\r\n","\r\nimport { SUBMIT_FORM } from '../const/actionTypes';\r\n\r\n/**\r\n * @description action for submit user with left marbles\r\n */\r\nexport const submitForm = (userForm) => {\r\n    return {\r\n        type: SUBMIT_FORM,\r\n        payload: new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                alert('SUCCESS: Score with user name is sent to server.')\r\n                resolve();\r\n            }, 1000);\r\n        })\r\n    };\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport { marblePicked, marbleReleased, marbleDropped, marbleRemoved, resetBoard } from '../../actions/appActions';\r\nimport { OCCUPIED, VACANT } from '../../const/boardConstants';\r\nimport Header from '../../components/header/Header';\r\nimport Board from '../../components/board/Board';\r\nimport Form from '../form/Form';\r\n\r\nclass App extends React.Component {\r\n\r\n  defaultState = {\r\n    noOfMarblesLeft: 32,\r\n    isAnyValidMoveLeft: true,\r\n    message: ''\r\n  }\r\n  \r\n  constructor() {\r\n    super();\r\n    this.state = cloneDeep(this.defaultState)\r\n  }\r\n\r\n  /**\r\n   * @description to handle click of marbles\r\n   * @param {Number} x: x coordinate of the selected marble\r\n   * @param {Number} y: y coordinate of the selected marble\r\n   * validate if marble is already picked then will give error\r\n   * release marble if already picked marble is same as new marble\r\n   */\r\n  onMarbleClick(x, y) {\r\n    if(!this.state.isAnyValidMoveLeft) {\r\n      return;\r\n    }\r\n    if (isEmpty(this.props.pickedMarble)) {\r\n      this.props.pickMarble(x, y);\r\n    } else if (this.props.pickedMarble.x === x && this.props.pickedMarble.y === y) {\r\n      this.setMessage();\r\n      this.props.releasePickedMarble(x, y);\r\n    } else {\r\n      this.setMessage('You have already picked the marble. Select a hole or click on same the marble to release the marble');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description to handle click of vacant place\r\n   * @param {Number} x: x coordinate of the selected vacant place\r\n   * @param {Number} y: y coordinate of the selected vacant place\r\n   * validate if marble is picked or not\r\n   * validate if move is valid\r\n   * validate if no valid moves are left\r\n   */\r\n  onVacantPlaceClick(x, y) {\r\n    if(!this.state.isAnyValidMoveLeft) {\r\n      return;\r\n    }\r\n    if (isEmpty(this.props.pickedMarble)) {\r\n      this.setMessage('Please select the marble first.');\r\n    } else {\r\n      if (this.isValidMove(x, y)) {\r\n        this.setMessage(); // set message blank as valid move\r\n        this.props.dropMarble(x, y); // drop a marble to selected vacant place\r\n        this.props.removeMarble(this.props.pickedMarble.x, this.props.pickedMarble.y); // remove selected marble to move\r\n        const middleMarble = this.getMiddleMarble(this.props.pickedMarble.x, this.props.pickedMarble.y, x, y) // get middle marble position of selected marble and selected vacant space\r\n        // remove middle marble as its valid move\r\n        this.props.removeMarble(middleMarble.x, middleMarble.y).then(()=>{\r\n          // decrease marble count by 1\r\n          this.setState(oldState => {\r\n            return {\r\n              noOfMarblesLeft: oldState.noOfMarblesLeft - 1,\r\n            }\r\n          })\r\n          if (!this.isAnyValidMoveLeft()) {\r\n            this.setMessage('GAME OVER !! No Valid Move Left.');\r\n            this.setState({ isAnyValidMoveLeft: false });\r\n          }\r\n        });\r\n      } else {\r\n        this.setMessage('Invalid Move');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description to check if desired move is valid\r\n   * @param {Number} x: x coordinate of the selected vacant place\r\n   * @param {Number} y: y coordinate of the selected vacant place\r\n   * get is move is horizontal or vertical\r\n   * validate if middle marble is OCCUPIED\r\n   */\r\n  isValidMove(x, y) {\r\n    const pickedMarble = this.props.pickedMarble; // picked marble coordinates\r\n    if (pickedMarble.x !== x && pickedMarble.y !== y) {\r\n      return false;\r\n    } else {\r\n      const isHoriontalMove = pickedMarble.x === x; // get if desired move is horizontal\r\n      if (isHoriontalMove) {\r\n        // check if horizontal distance between picked marble and select vacant place is 2 and in middle marble is present\r\n        return Math.abs(pickedMarble.y - y) == 2\r\n          && this.props.boardStatus[pickedMarble.x][pickedMarble.y < y ? pickedMarble.y + 1 : pickedMarble.y - 1] == OCCUPIED\r\n      } else {\r\n        // check if vertical distance between picked marble and select vacant place is 2 and in middle marble is present\r\n        return Math.abs(pickedMarble.x - x) == 2\r\n          && this.props.boardStatus[pickedMarble.x < x ? pickedMarble.x + 1 : pickedMarble.x - 1][pickedMarble.y] == OCCUPIED\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description to validate if any valid move is remaining\r\n   */\r\n  isAnyValidMoveLeft() {\r\n    let isAnyValidMove = false;\r\n    const boardStatus = this.props.boardStatus;\r\n    for(let x = 0; x < boardStatus.length; x++) {\r\n      for(let y = 0; y < boardStatus[x].length; y++) {\r\n        if (this.props.boardStatus[x][y] === VACANT) {\r\n          // check nearby marble is present till 2 places horizontal and vertical \r\n          if ((boardStatus[x][y + 1] === OCCUPIED && boardStatus[x][y + 2] === OCCUPIED) || (boardStatus[x][y - 1] === OCCUPIED && boardStatus[x][y - 2] === OCCUPIED) || \r\n            ((boardStatus[x + 1] && boardStatus[x + 1][y]) === OCCUPIED && (boardStatus[x + 2] && boardStatus[x + 2][y]) === OCCUPIED) ||\r\n            ((boardStatus[x - 1] && boardStatus[x - 1][y]) === OCCUPIED && (boardStatus[x - 2] && boardStatus[x - 2][y]) === OCCUPIED)) {\r\n              isAnyValidMove = true;\r\n              break; // stop search if any single valid move is identified\r\n          }\r\n        }\r\n      }\r\n      if (isAnyValidMove) {\r\n        break;\r\n      }\r\n    }\r\n    return isAnyValidMove;\r\n  }\r\n\r\n  /**\r\n   * @description to get the coordinates of middle marble\r\n   * @param {Number} x1: x coordinate of the selected marble\r\n   * @param {Number} y1: y coordinate of the selected marble\r\n   * @param {Number} x2: x coordinate of the selected vacant place\r\n   * @param {Number} y2: y coordinate of the selected vacant place\r\n   */\r\n  getMiddleMarble(x1, y1, x2, y2) {\r\n    const isHoriontalMove = x1 === x2;\r\n    if (isHoriontalMove) {\r\n      return {\r\n        x: x1,\r\n        y: y1 < y2 ? y1 + 1 : y1 - 1\r\n      }\r\n    } else {\r\n      return {\r\n        x: x1 < x2 ? x1 + 1 : x1 - 1,\r\n        y: y1\r\n      }\r\n    }\r\n  }\r\n\r\n  setMessage(message = '') {\r\n    this.setState({ message });\r\n  }\r\n\r\n  /**\r\n   * @description to restart/reset the entire board\r\n   */\r\n  onGameRestart() {\r\n    this.props.resetBoard().then(()=> {\r\n      this.setState(cloneDeep(this.defaultState))\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header/>\r\n        <Board \r\n          boardStatus={this.props.boardStatus}\r\n          message={this.state.message}\r\n          noOfMarblesLeft={this.state.noOfMarblesLeft}\r\n          onMarbleClick={this.onMarbleClick.bind(this)}\r\n          onVacantPlaceClick={this.onVacantPlaceClick.bind(this)}\r\n          onGameRestart={this.onGameRestart.bind(this)}/>\r\n          <Form noOfMarblesLeft={this.state.noOfMarblesLeft}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state.appReducer;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=> {\r\n  return {\r\n      pickMarble: (x, y) => {\r\n        dispatch(marblePicked({x , y}))\r\n      },\r\n      releasePickedMarble: (x, y) => {\r\n        dispatch(marbleReleased({x , y}))\r\n      },\r\n      dropMarble: (x, y) => {\r\n        dispatch(marbleDropped({x , y}))\r\n      },\r\n      removeMarble: (x, y) => {\r\n        dispatch(marbleRemoved({x , y}));\r\n        return Promise.resolve();\r\n      },\r\n      resetBoard: (x, y) => {\r\n        dispatch(resetBoard({x , y}));\r\n        return Promise.resolve();\r\n      }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(App));\r\n","import * as types from \"../const/actionTypes\";\r\n\r\n/**\r\n * @description action for picking marble\r\n */\r\nexport const marblePicked = (payload) => ({\r\n  type: types.MARBLE_PICKED,\r\n  payload,\r\n});\r\n\r\n/**\r\n * @description action for releasing marble on same position\r\n */\r\nexport const marbleReleased = (payload) => ({\r\n  type: types.MARBLE_RELEASED,\r\n  payload,\r\n});\r\n\r\n/**\r\n * @description action for dropping marble on vacant place\r\n */\r\nexport const marbleDropped = (payload) => ({\r\n  type: types.MARBLE_DROPPED,\r\n  payload,\r\n});\r\n\r\n/**\r\n * @description action for removing marble\r\n */\r\nexport const marbleRemoved = (payload) => ({\r\n  type: types.MARBLE_REMOVED,\r\n  payload,\r\n});\r\n\r\n/**\r\n * @description action for restart game\r\n */\r\nexport const resetBoard = (payload) => ({\r\n  type: types.RESET_BOARD,\r\n  payload,\r\n});\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import cloneDeep from 'lodash/cloneDeep';\r\nimport * as types from '../const/actionTypes';\r\nimport { DEFAULT_BOARD, PICKED, OCCUPIED, VACANT } from '../const/boardConstants';\r\n\r\nconst defaultState = {\r\n    boardStatus : cloneDeep(DEFAULT_BOARD),\r\n    pickedMarble: null\r\n}\r\n\r\nconst appReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case types.MARBLE_PICKED: // action when marble is picked\r\n            state.boardStatus[action.payload.x][action.payload.y] =  PICKED;\r\n            state = {\r\n                ...state,\r\n                pickedMarble: action.payload,\r\n                boardStatus : cloneDeep(state.boardStatus)\r\n            }\r\n            break;\r\n        case types.MARBLE_RELEASED: // action when marble is dropped at same location\r\n        case types.MARBLE_DROPPED: // action when marble is dropped at vacant location\r\n            state.boardStatus[action.payload.x][action.payload.y] =  OCCUPIED;\r\n            state = {\r\n                ...state,\r\n                pickedMarble: null,\r\n                boardStatus : cloneDeep(state.boardStatus)\r\n            }\r\n            break;\r\n        case types.MARBLE_REMOVED: // action to remove marble from board and make place vacant\r\n            state.boardStatus[action.payload.x][action.payload.y] =  VACANT;\r\n            state = {\r\n                ...state,\r\n                pickedMarble: null,\r\n                boardStatus : cloneDeep(state.boardStatus)\r\n            }\r\n            break;\r\n        case types.RESET_BOARD: // action to restart/reset game\r\n            state = {\r\n                ...state,\r\n                pickedMarble: null,\r\n                boardStatus : cloneDeep(DEFAULT_BOARD)\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default appReducer;","import { SUBMIT_FORM } from '../const/actionTypes';\r\n\r\nconst formReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case SUBMIT_FORM: // action to submit user form\r\n            state = {\r\n                ...state\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default formReducer;","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport appReducer from \"./reducers/appReducer\";\r\nimport formReducer from \"./reducers/formReducer\";\r\n\r\nexport default createStore(combineReducers({appReducer, formReducer}), applyMiddleware(thunk));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardContainer\":\"Board_boardContainer__1wnPW\",\"board\":\"Board_board__3vM3T\",\"row\":\"Board_row__1Tw0u\",\"vacant\":\"Board_vacant__1DVOa\",\"blank\":\"Board_blank__3mAvk\",\"marble\":\"Board_marble__19ihk\",\"picked\":\"Board_picked__1jvgC\",\"errorMessage\":\"Board_errorMessage__oVdL5\",\"resetButton\":\"Board_resetButton__O8P32\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Form_formContainer__CJ8XC\",\"submitButton\":\"Form_submitButton__f9jAl\"};"],"sourceRoot":""}